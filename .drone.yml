# drone secrets:
# registry_mirror = http://registry-mirror.domain.tld
# repository_backend  = registry.domain.tld/namespace/ledger
# repository_frontend = registry.domain.tld/namespace/ledger-frontend
# repository_backend_development  = registry.domain.tld/namespace/ledger:development
# repository_frontend_development = registry.domain.tld/namespace/ledger-frontend:development
# ssh_username
# ssh_host
# ssh_key

kind: pipeline
type: docker
name: "frontend - build"

volumes:
  - name: drone_cache
    host:
      path: /var/lib/docker/volumes_managed/drone_cache

trigger:
  event:
    - push
    - tag

steps:
  - name: cache pull
    image: drone/git
    commands:
      - /drone/src/scripts/drone-cache-pull.sh ledger-frontend
    volumes:
      - name: drone_cache
        path: /drone/drone_cache

  - name: build
    image: node:latest
    depends_on:
      - "cache pull"
    commands:
      - export PATH=/drone/src/frontend/node_modules/.bin:$PATH
      - cd /drone/src/frontend
      - npm install
      - ng build --prod

  - name: cache push
    image: drone/git
    depends_on:
      - "build"
    commands:
      - /drone/src/scripts/drone-cache-push.sh ledger-frontend
    volumes:
      - name: drone_cache
        path: /drone/drone_cache

---
kind: pipeline
name: "frontend - publish"
type: docker

trigger:
  event:
    - push
    - tag
  ref:
    - refs/heads/feature-*
    - refs/tags/*

depends_on:
  - "frontend - build"

volumes:
  - name: drone_cache
    host:
      path: /var/lib/docker/volumes_managed/drone_cache

clone:
  disable: true

steps:
  - name: clone
    image: drone/git
    commands:
      - git clone $DRONE_REPO_LINK .
      - git config advice.detachedHead false
      - git checkout $DRONE_COMMIT
      - git fetch --tags

  - name: cache pull
    image: drone/git
    depends_on:
      - "clone"
    commands:
      - /drone/src/scripts/drone-cache-pull.sh ledger-frontend
      - pwd
      - ls -la
      - ls /drone/src/frontend/dist/ledger-frontend/ -la
    volumes:
      - name: drone_cache
        path: /drone/drone_cache

  - name: publish feature
    image: plugins/docker
    depends_on:
      - "cache pull"
    settings:
      auto_tag: false
      cache_from:
        from_secret: repository_frontend_development
      context: /drone/src/frontend/
      dockerfile: /drone/src/frontend/Dockerfile
      tags: development
      mirror:
        from_secret: registry_mirror
      repo:
        from_secret: repository_frontend
    when:
      ref:
        - refs/heads/feature-*

  - name: publish release
    image: plugins/docker
    depends_on:
      - "cache pull"
    settings:
      auto_tag: false
      cache_from:
        from_secret: repository_frontend_development
      context: /drone/src/frontend/
      dockerfile: /drone/src/frontend/Dockerfile
      mirror:
        from_secret: registry_mirror
      repo:
        from_secret: repository_frontend
    when:
      ref:
        - refs/tags/*

---
kind: pipeline
type: docker
name: "backend - build"

trigger:
  event:
    - push
    - tag

clone:
  disable: true

volumes:
  - name: drone_cache
    host:
      path: /var/lib/docker/volumes_managed/drone_cache

services:
  - name: postgres
    image: postgres:latest
    environment:
      POSTGRES_USER: ledger
      POSTGRES_PASSWORD: ledger
      POSTGRES_DB: ledger

steps:
  - name: clone
    image: drone/git
    commands:
      - git clone $DRONE_REPO_LINK .
      - git config advice.detachedHead false
      - git checkout $DRONE_COMMIT
      - git fetch --tags

  - name: cache pull
    image: drone/git
    depends_on:
      - "clone"
    commands:
      - /drone/src/scripts/drone-cache-pull.sh ledger-backend
    volumes:
      - name: drone_cache
        path: /drone/drone_cache

  - name: verify postgres
    image: postgres
    commands:
      - |
        until psql "dbname=ledger host=postgres user=ledger password=ledger port=5432" \
          -c "select 1;" >/dev/null 2>&1; do sleep 1; done
      - |
        psql "dbname=ledger host=postgres user=ledger password=ledger port=5432" \
          -c "select count(*) from pg_catalog.pg_tables;"

  - name: build
    image: gradle:6.8-jdk15
    depends_on:
      - "cache pull"
      - "verify postgres"
    commands:
      - >
        gradle :backend:explodebootjar :backend:testClasses :backend:spotlessCheck writeVersion
      - >
        gradle :backend:test
      - >
        gradle :backend:integrationTests
        -x :backend:bootBuildInfo
      - >
        gradle :backend:integrationTests
        -x backend:bootBuildInfo
        -Dspring.profiles.active=postgresql
        -Dspring.datasource.url=jdbc:postgresql://postgres:5432/ledger
        -Dspring.datasource.username=ledger
        -Dspring.datasource.password=ledger
        -Dspring.datasource.platform=postgresql
      - >
        gradle --stop
    environment:
      NODE_OPTION: --max-old-space-size=4096

  - name: cache push
    image: drone/git
    depends_on:
      - "build"
    commands:
      - /drone/src/scripts/drone-cache-push.sh ledger-backend
    volumes:
      - name: drone_cache
        path: /drone/drone_cache

---
kind: pipeline
name: "backend - publish"
type: docker

trigger:
  event:
    - push
    - tag
  ref:
    - refs/heads/feature-*
    - refs/tags/*

depends_on:
  - "backend - build"

volumes:
  - name: drone_cache
    host:
      path: /var/lib/docker/volumes_managed/drone_cache

steps:
  - name: cache pull
    image: drone/git
    depends_on:
      - "clone"
    commands:
      - /drone/src/scripts/drone-cache-pull.sh ledger-backend
    volumes:
      - name: drone_cache
        path: /drone/drone_cache

  - name: write docker tag (development)
    image: drone/git:latest
    depends_on:
      - "cache pull"
    commands:
      - cat version > .tags
      - echo ",development" >> .tags
      - cat .tags
    when:
      ref:
        - refs/heads/feature-*

  - name: publish feature
    image: plugins/docker
    depends_on:
      - "write docker tag (development)"
    settings:
      auto_tag: false
      cache_from:
        from_secret: repository_backend_development
      context: /drone/src/backend/
      dockerfile: /drone/src/backend/Dockerfile
      tags: development
      mirror:
        from_secret: registry_mirror
      repo:
        from_secret: repository_backend
    when:
      ref:
        - refs/heads/feature-*

  - name: write docker tag (release)
    image: drone/git:latest
    commands:
      - cat version > .tags
      - echo ",latest" >> .tags
      - cat .tags
    when:
      ref:
        - refs/tags/*

  - name: publish release
    image: plugins/docker
    depends_on:
      - "write docker tag (release)"
    settings:
      auto_tag: false
      cache_from:
        from_secret: repository_backend_development
      context: /drone/src/backend/
      dockerfile: /drone/src/backend/Dockerfile
      mirror:
        from_secret: registry_mirror
      repo:
        from_secret: repository_backend
    when:
      ref:
        - refs/tags/*

---
kind: pipeline
name: deploy
type: docker

trigger:
  event:
    - push
    - tag
  ref:
    - refs/heads/feature-*

depends_on:
  - "frontend - publish"
  - "backend - publish"

clone:
  disable: true

steps:
  - name: deploy to development
    image: appleboy/drone-ssh
    settings:
      host:
        from_secret: ssh_host_dev
      username:
        from_secret: ssh_username
      key:
        from_secret: ssh_key
      script:
        - cd docker
        - ansible-playbook dev.yaml -i inventory.yaml -e do=restart --tags=ledger
        # otherwise: docker-compose up stacks/ledger/docker-compose.yaml -d --remove-orphans

---
kind: pipeline
name: deploy to production
type: docker

trigger:
  event:
    - push
    - tag
  ref:
    - refs/tags/*

depends_on:
  - "frontend - publish"
  - "backend - publish"

clone:
  disable: true

steps:
  - name: deploy
    image: appleboy/drone-ssh
    settings:
      host:
        from_secret: ssh_host_prd
      username:
        from_secret: ssh_username
      key:
        from_secret: ssh_key
      script:
        - cd docker
        - ansible-playbook prd.yaml -i inventory.yaml -e do=restart --tags=ledger
        # otherwise: docker-compose up stacks/ledger/docker-compose.yaml -d --remove-orphans
