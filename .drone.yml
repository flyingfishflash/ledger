# repository secrets:
# - repository_backend  = registry.domain.tld/namespace/ledger
# - repository_frontend = registry.domain.tld/namespace/ledger-frontend
# - repository_backend_development  = registry.domain.tld/namespace/ledger:development
# - repository_frontend_development = registry.domain.tld/namespace/ledger-frontend:development
# - ssh_username
# - ssh_host_dev
# - ssh_host_prd
# - ssh_key

# organization secrets:
# - nyx_git_codeberg_token
# - nyx_git_flyingfishflash_user
# - nyx_git_flyingfishflash_password
# - nyx_git_flyingfishflash_token
# - nyx_git_github_token
# - nyx_git_gitlab_token
# - registry_hostname
# - registry_username
# - registry_password
# - sonar_host
# - sonar_login (user token)

kind: pipeline
type: docker
name: "frontend - build"

volumes:
  - name: drone_cache
    host:
      path: /var/lib/docker/volumes_managed/drone_cache

trigger:
  event:
    - push
    - tag
  ref:
    - refs/heads/build-*
    - refs/heads/feature-*
    - refs/heads/fix-*
    - refs/heads/main
    - refs/heads/perf-*
    - refs/heads/refactor-*
    - refs/heads/release

steps:
  # nyx requires git tags to infer the current version
  - name: fetch git tags
    image: alpine/git
    commands:
      - git fetch --tags

  - name: infer version
    image: registry.flyingfishflash.net/customized-images/container-nyx
    depends_on:
      - fetch git tags
    commands:
      - export NYX_SUMMARY=.nyx-summary
      - export VERSION=.version
      - rm -fv $NYX_SUMMARY
      - rm -fv $VERSION
      - nyx infer --dry-run=false --fatal --summary > $NYX_SUMMARY
      - cat $NYX_SUMMARY && echo
      - export NYX_CURRENT_VERSION=$(cat $NYX_SUMMARY | grep 'current version' | awk '{ print $NF }' | tr -d '\n')
      - echo $NYX_CURRENT_VERSION
      - echo $NYX_CURRENT_VERSION > $VERSION

  - name: build
    image: node:18-alpine
    depends_on:
      - infer version
    commands:
      - export VERSION=.version
      - export NYX_VERSION=$(cat .version)
      - export SCM_COMMIT_SHORT_SHA=$(echo $DRONE_COMMIT_SHA | cut -c1-8)
      - echo $SCM_COMMIT_SHORT_SHA
      # define alt location for npm cache
      - export CLIENT_NPM_CACHE=/drone/drone_cache/$DRONE_REPO/client/npm
      - echo $CLIENT_NPM_CACHE
      - mkdir -pv $CLIENT_NPM_CACHE
      # define alt location for distributable files
      - export CLIENT_DIST=/drone/drone_cache/$DRONE_REPO/client/dist
      - echo $CLIENT_DIST
      - mkdir -pv $CLIENT_DIST
      - export PATH=/drone/src/frontend/node_modules/.bin:$PATH
      - cd /drone/src/frontend
      - |
        export JSON_BUILD_PROPERTIES=$(node -pe "
          JSON.stringify({
            artifact: new String('ledger'),
            ciPipelineId: process.env.DRONE_BUILD_NUMBER,
            ciPlatform: new String('drone'),
            commit: process.env.SCM_COMMIT_SHORT_SHA,
            group: Symbol(''),
            name: Symbol(''),
            time: Symbol(''),
            version: process.env.NYX_VERSION
          });
        ")
      - echo $JSON_BUILD_PROPERTIES > src/assets/buildProperties.json
      - cat src/assets/buildProperties.json
      - npm version $NYX_VERSION --no-git-tag-version
      - npm ci --cache $CLIENT_NPM_CACHE --prefer-offline
      - ng version
      - ng build --configuration production --output-path=$CLIENT_DIST/ledger-frontend
      - ls -la $CLIENT_DIST/ledger-frontend
    volumes:
      - name: drone_cache
        path: /drone/drone_cache

---
kind: pipeline
type: docker
name: "backend - build"

trigger:
  event:
    - push
    - tag
  ref:
    - refs/heads/build-*
    - refs/heads/feature-*
    - refs/heads/fix-*
    - refs/heads/main
    - refs/heads/perf-*
    - refs/heads/refactor-*
    - refs/heads/release

volumes:
  - name: drone_cache
    host:
      path: /var/lib/docker/volumes_managed/drone_cache

services:
  - name: postgres
    image: postgres:latest
    environment:
      POSTGRES_USER: ledger
      POSTGRES_PASSWORD: ledger
      POSTGRES_DB: ledger

steps:
  # nyx requires git tags to infer the current version
  - name: fetch git tags
    image: alpine/git
    commands:
      - git fetch --tags

  - name: verify postgres
    image: postgres
    commands:
      - |
        until psql "dbname=ledger host=postgres user=ledger password=ledger port=5432" \
          -c "select 1;" >/dev/null 2>&1; do sleep 1; done
      - |
        psql "dbname=ledger host=postgres user=ledger password=ledger port=5432" \
          -c "select count(*) from pg_catalog.pg_tables;"

  - name: build
    image: gradle:8-jdk17
    depends_on:
      - fetch git tags
      - verify postgres
    commands:
      - export GRADLE_USER_HOME=/drone/drone_cache/$DRONE_REPO/api/gradle-user-home
      - echo $GRADLE_USER_HOME
      - mkdir -pv $GRADLE_USER_HOME
      - touch $GRADLE_USER_HOME/gradle.properties
      - echo org.gradle.caching=true > $GRADLE_USER_HOME/gradle.properties
      - echo org.gradle.daemon=false >> $GRADLE_USER_HOME/gradle.properties
      - export GRADLE_PROJECT_BUILD_DIR=/drone/drone_cache/$DRONE_REPO/api/build
      - echo $GRADLE_PROJECT_BUILD_DIR
      - mkdir -pv $GRADLE_PROJECT_BUILD_DIR
      - >
        gradle
        :backend:explodebootjar
        :backend:copyBuildInfo
        :backend:testClasses
        :backend:spotlessCheck
        :backend:test
        :backend:integrationTests
        :backend:bootBuildInfo
        -PbuildDir=$GRADLE_PROJECT_BUILD_DIR
      - >
        gradle
        :backend:integrationTests
        -Dspring.profiles.active=postgresql
        -Dspring.datasource.url=jdbc:postgresql://postgres:5432/ledger
        -Dspring.datasource.username=ledger
        -Dspring.datasource.password=ledger
        -Dspring.datasource.platform=postgresql
        -PbuildDir=$GRADLE_PROJECT_BUILD_DIR
      - >
        /drone/src/scripts/ci/drone/drone-is-sonar-configured.sh &&
        gradle
        sonar
        -Dsonar.host.url=$SONAR_HOST
        -Dsonar.token=$SONAR_TOKEN
        -Dsonar.qualitygate.wait=true
        -PbuildDir=$GRADLE_PROJECT_BUILD_DIR
    environment:
      SONAR_HOST:
        from_secret: sonar_host
      SONAR_TOKEN:
        from_secret: sonar_token
    volumes:
      - name: drone_cache
        path: /drone/drone_cache

---
kind: pipeline
name: "publish - image"
type: docker

trigger:
  event:
    - push
    - tag
  ref:
    - refs/heads/feature-*
    - refs/heads/fix-*
    - refs/heads/perf-*
    - refs/heads/refactor-*
    - refs/heads/release
    - refs/tags/*

depends_on:
  - "frontend - build"
  - "backend - build"

volumes:
  - name: drone_cache_client_dist
    host:
      path: /var/lib/docker/volumes_managed/drone_cache/flyingfishflash/ledger/client/dist
  - name: drone_cache_api_build
    host:
      path: /var/lib/docker/volumes_managed/drone_cache/flyingfishflash/ledger/api/build

  # nyx requires git tags to infer the current version
steps:
  - name: fetch git tags
    image: alpine/git
    commands:
      - git fetch --tags

  - name: infer version
    image: registry.flyingfishflash.net/customized-images/container-nyx
    depends_on:
      - fetch git tags
    commands:
      - export NYX_SUMMARY=.nyx-summary
      - export VERSION=.version
      - export TAGS=.tags
      - rm -fv $NYX_SUMMARY
      - rm -fv $VERSION
      - nyx infer --dry-run=false --fatal --summary > $NYX_SUMMARY
      - cat $NYX_SUMMARY && echo
      - export NYX_CURRENT_VERSION=$(cat $NYX_SUMMARY | grep 'current version' | awk '{ print $NF }' | tr -d '\n')
      - echo $NYX_CURRENT_VERSION
      - echo $NYX_CURRENT_VERSION > $VERSION
      - echo -n $NYX_CURRENT_VERSION > $TAGS
      - '[ -z "$DRONE_TAG" ] && echo -n ",development" >> $TAGS || echo -n ",latest"  >> $TAGS'
      - cat $TAGS && echo

  - name: publish frontend
    image: plugins/docker
    depends_on:
      - infer version
    privileged: true
    settings:
      auto_tag: false
      cache_from:
        from_secret: repository_frontend_development
      context: /drone/src/frontend/
      dockerfile: /drone/src/frontend/Dockerfile
      repo:
        from_secret: repository_frontend
      registry:
        from_secret: registry_hostname
      username:
        from_secret: registry_username
      password:
        from_secret: registry_password
    volumes:
      - name: drone_cache_client_dist
        path: /drone/src/frontend/dist

  - name: publish backend
    image: plugins/docker
    depends_on:
      - infer version
    privileged: true
    settings:
      auto_tag: false
      cache_from:
        from_secret: repository_backend_development
      context: /drone/src/backend/
      dockerfile: /drone/src/backend/Dockerfile
      repo:
        from_secret: repository_backend
      registry:
        from_secret: registry_hostname
      username:
        from_secret: registry_username
      password:
        from_secret: registry_password
    volumes:
      - name: drone_cache_api_build
        path: /drone/src/backend/build

---
kind: pipeline
name: "publish - release"
type: docker

trigger:
  event:
    - push
  ref:
    - refs/heads/release

depends_on:
  - "publish - image"

volumes:
  - name: drone_cache
    host:
      path: /var/lib/docker/volumes_managed/drone_cache

steps:
  # nyx requires git tags to infer the current version
  - name: fetch git tags
    image: alpine/git
    commands:
      - git fetch --tags

  - name: "publish - release"
    image: registry.flyingfishflash.net/customized-images/container-nyx
    depends_on:
      - fetch git tags
    environment:
      NYX_GIT_FLYINGFISHFLASH_USER:
        from_secret: nyx_git_flyingfishflash_user
      NYX_GIT_FLYINGFISHFLASH_PASSWORD:
        from_secret: nyx_git_flyingfishflash_password
      NYX_GIT_FLYINGFISHFLASH_TOKEN:
        from_secret: nyx_git_flyingfishflash_token
      NYX_GIT_CODEBERG_TOKEN:
        from_secret: nyx_git_codeberg_token
      NYX_GIT_GITHUB_TOKEN:
        from_secret: nyx_git_github_token
      NYX_GIT_GITLAB_TOKEN:
        from_secret: nyx_git_gitlab_token
    commands:
      - mkdir /drone/src/build
      - nyx infer --dry-run=false --fatal
      - nyx --dry-run=false --fatal --summary
      - nyx publish --dry-run=false
    volumes:
      - name: drone_cache
        path: /drone/cache

---
kind: pipeline
name: "deploy - development"
type: docker

trigger:
  event:
    - push
  ref:
    - refs/heads/feature-*
    - refs/heads/fix-*
    - refs/heads/perf-*
    - refs/heads/refactor-*
    - refs/heads/release

depends_on:
  - "publish - image"

clone:
  disable: true

steps:
  - name: deploy
    image: appleboy/drone-ssh
    settings:
      host:
        from_secret: ssh_host_dev
      username:
        from_secret: ssh_username
      key:
        from_secret: ssh_key
      script:
        - ~/.local/bin/scripts/ledger-dev-redeploy.sh

---
kind: pipeline
name: "deploy - production"
type: docker

trigger:
  event:
    - push
    - tag
  ref:
    - refs/tags/*

depends_on:
  - "publish - image"

clone:
  disable: true

steps:
  - name: deploy
    image: alpine/git
    commands:
      - echo "here's where we would deploy to production"

#  - name: deploy
#    image: appleboy/drone-ssh
#    settings:
#      host:
#        from_secret: ssh_host_prd
#      username:
#        from_secret: ssh_username
#      key:
#        from_secret: ssh_key
#      script:
#        - ~/.local/bin/scripts/ledger-prd-redeploy.sh
