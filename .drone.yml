kind: pipeline
type: docker
name: 'build ➔ test ➔ publish'

# drone secrets:
# custom_mirror = registry-mirror.domain.tld
# custom_repository = registry.domain.tld/namespace/ledger
# custom_repository_ledger_development = registry.domain.tld/namespace/ledger:development
# production_api_host = ledger.domain.tld
# production_api_scheme = https
# ssh_username
# ssh_host
# ssh_key

volumes:
  - name: gradle_user_home
    host:
      path: /var/lib/docker/volumes_managed/drone_gradle_user_home
  - name: node_modules
    host:
      path: /var/lib/docker/volumes_managed/drone_node_modules

services:
  - name: postgres
    image: postgres:latest
    environment:
      POSTGRES_USER: ledger
      POSTGRES_PASSWORD: ledger
      POSTGRES_DB: ledger

steps:
  - name: fetch git tags
    image: drone/git:latest
    commands:
      - git fetch --tags

  - name: build jar and docker tags
    image: gradle:6.7-jdk14
    commands:
      - >
        gradle version
        -x bootBuildInfo
        --gradle-user-home=/drone/src/gradle-user-home
        | grep Version | awk '{ print $2 }' | tr -d "\n" > ./.tags
      - >
        if [ "${DRONE_COMMIT_BRANCH}" = "master" ] || [ "${DRONE_COMMIT_BRANCH}" = "" ]
        ; then echo ",latest" >> .tags
        ; else echo ",development" >> .tags
        ; fi
      - >
        cat .tags && echo
      - >
        sed -i "s@localhost:8181@$API_HOST@g" src/main/frontend/src/environments/environment.prod.ts
      - >
        sed -i "s@http@$API_SCHEME@g" src/main/frontend/src/environments/environment.prod.ts
      - >
        export PATH=/drone/src/src/main/frontend/node_modules/.bin:$PATH
      - >
        gradle bootJar testClasses
        --gradle-user-home=/drone/src/gradle-user-home
    environment:
      NODE_OPTION: --max-old-space-size=4096
      API_HOST:
        from_secret: production_api_host
      API_SCHEME:
        from_secret: production_api_scheme
    volumes:
      - name: gradle_user_home
        path: /drone/src/gradle-user-home
      - name: node_modules
        path: /drone/src/src/main/frontend/node_modules

  - name: unit tests
    image: gradle:6.7-jdk14
    commands:
      - gradle test
        -x bootBuildInfo
        --no-daemon
        --gradle-user-home=/drone/src/gradle-user-home
    volumes:
      - name: gradle_user_home
        path: /drone/src/gradle-user-home

  - name: h2 integration tests
    image: gradle:6.7-jdk14
    commands:
      - gradle integrationTests
        -x bootBuildInfo
        --no-daemon
        --gradle-user-home=/drone/src/gradle-user-home
    volumes:
      - name: gradle_user_home
        path: /drone/src/gradle-user-home

  - name: verify postgres
    image: postgres
    commands:
      - |
        until psql "dbname=ledger host=postgres user=ledger password=ledger port=5432" \
          -c "select 1;" >/dev/null 2>&1; do sleep 1; done
      - |
        psql "dbname=ledger host=postgres user=ledger password=ledger port=5432" \
          -c "select count(*) from pg_catalog.pg_tables;"

  - name: postgres integration tests
    image: gradle:6.7-jdk14
    commands:
      - gradle integrationTests
        -x bootBuildInfo
        --no-daemon
        --gradle-user-home=/drone/src/gradle-user-home
        -Dspring.profiles.active=postgresql
        -Dspring.datasource.url=jdbc:postgresql://postgres:5432/ledger
        -Dspring.datasource.username=ledger
        -Dspring.datasource.password=ledger
        -Dspring.datasource.platform=postgresql
    volumes:
      - name: gradle_user_home
        path: /drone/src/gradle-user-home

  - name: publish feature branch
    image: plugins/docker
    settings:
      auto_tag: false
      cache_from:
        from_secret: custom_repository_ledger_development
      dockerfile: Dockerfile.drone
      mirror:
        from_secret: custom_mirror
      repo:
        from_secret: custom_repository
    when:
      branch:
        exclude:
          - master
      event:
        exclude:
          - tag

  - name: publish release
    image: plugins/docker
    settings:
      auto_tag: false
      cache_from:
        from_secret: custom_repository_ledger_development
      dockerfile: Dockerfile.drone
      mirror:
        from_secret: custom_mirror
      repo:
        from_secret: custom_repository
    when:
      ref:
        - refs/tags/*

trigger:
  event:
    - push
    - tag

---

kind: pipeline
name: deploy
type: docker

depends_on:
  - 'build ➔ test ➔ publish'

steps:
  - name: deploy
    image: appleboy/drone-ssh
    settings:
      host:
        from_secret: ssh_host
      username:
        from_secret: ssh_username
      key:
        from_secret: ssh_key
      script:
        - cd docker
        - ansible-playbook docker-0.yaml -i inventory.yaml -e do=restart --tags=ledger
        # otherwise: docker-compose up stacks/ledger/docker-compose.yaml -d --remove-orphans
