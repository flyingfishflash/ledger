plugins {
    id 'java'
    id 'org.springframework.boot' version '2.6.5'
    id 'com.diffplug.spotless'
    id 'jacoco'
}

//artifactId = 'ledger-backend'
group = 'net.flyingfishflash'
//name = 'ledger'
description = 'Ledger'


repositories {
    mavenCentral()

    maven {
        url = uri('https://jitpack.io')
    }
}

dependencies {
    String springBootVersion = "2.6.5"
    String springSessionVersion = "2.6.2"

    implementation "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-websocket:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-validation:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-security:$springBootVersion"
    implementation "org.springframework.session:spring-session-core:$springSessionVersion"
    implementation "org.springframework.session:spring-session-jdbc:$springSessionVersion"
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.6'
    implementation 'com.github.eXsio:nestedj:5.0.4'
    implementation 'com.h2database:h2:1.4.200'
    implementation 'org.postgresql:postgresql:42.3.3'
    implementation 'org.javamoney:moneta:1.4.2'
    implementation 'javax.interceptor:javax.interceptor-api:1.2.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.2.2'
    implementation 'org.zalando:jackson-datatype-money:1.3.0'
    implementation 'org.flywaydb:flyway-core:8.5.5'
    implementation 'commons-validator:commons-validator:1.7'
    runtimeOnly 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'
    testImplementation 'org.springframework.security:spring-security-test:5.6.2'
    testImplementation "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
}


def explodeBootJar = tasks.register('explodeBootJar', Sync) {
    dependsOn bootJar
    into "$buildDir/boot_jar_exploded"
    from project.zipTree(bootJar.archiveFile)
}

def copyBuildInfo = tasks.register('copyBuildInfo', Copy) {
    mustRunAfter explodeBootJar
    from layout.buildDirectory.file("boot_jar_exploded/META-INF/build-info.properties")
    into layout.buildDirectory.dir("boot_jar_exploded/BOOT-INF/classes/META-INF/")
}

task integrationTests(type: Test) {
    systemProperties System.properties
    useJUnitPlatform()
    mustRunAfter(test)

    testLogging {
        events "passed", "skipped", "failed"
    }

    filter {
        includeTestsMatching "net.flyingfishflash.ledger.*.integration.*"
    }

    jacoco {
        enabled = false
    }
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }

    filter {
        includeTestsMatching "net.flyingfishflash.ledger.*.unit.*"
    }

    finalizedBy jacocoTestReport
}

bootJar {
}

bootRun {
    jvmArgs = ["-Duser.timezone=UTC"]
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
}

compileJava {
    options.release.set(15)
}

springBoot {
    buildInfo {
        properties {
            artifact = 'ledger-backend'
            name = 'Ledger'
            version = scmVersion
            additional = [
                    'ciPlatform'  : ciPlatform,
                    'ciPipelineId': ciPipelineId,
                    'commit'      : scmCommit
            ]
        }
    }
}

spotless {
    format 'misc', {
        target '*.gradle', '*.md', '*.xml', '.gitignore'
        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }

    java {
        googleJavaFormat(googleJavaFormatVersion)
        trimTrailingWhitespace()
        importOrder('java', 'javax', 'com', 'org', 'net.flyingfishflash.ledger')
    }
}
