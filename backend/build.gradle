plugins {
    id 'java'
    id 'org.springframework.boot' version '2.6.7'
    id 'com.diffplug.spotless'
    id 'jacoco'
    id 'net.ltgt.errorprone' version '2.0.2'
//    id "com.github.spotbugs" version "5.0.6"
}

//artifactId = 'ledger-backend'
group = 'net.flyingfishflash'
//name = 'ledger'
description = 'Ledger'


repositories {
    mavenCentral()
    maven {
        url = uri('https://jitpack.io')
    }
}

dependencies {
    String springBootVersion = "2.6.7"
    String springSessionVersion = "2.6.3"

    implementation "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-websocket:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-validation:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-security:$springBootVersion"
    implementation "org.springframework.session:spring-session-core:$springSessionVersion"
    implementation "org.springframework.session:spring-session-jdbc:$springSessionVersion"
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.8'
    implementation 'com.github.eXsio:nestedj:5.0.4'
    implementation 'com.h2database:h2:2.1.212'
    implementation 'org.postgresql:postgresql:42.3.4'
    implementation 'org.javamoney:moneta:1.4.2'
    implementation 'javax.interceptor:javax.interceptor-api:1.2.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.2.2'
    implementation 'org.zalando:jackson-datatype-money:1.3.0'
    implementation 'org.flywaydb:flyway-core:8.5.9'
    implementation 'commons-validator:commons-validator:1.7'
    runtimeOnly 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'
    testImplementation 'org.springframework.security:spring-security-test:5.6.3'
    testImplementation "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
    errorprone 'com.google.errorprone:error_prone_core:2.13.1'
}


def explodeBootJar = tasks.register('explodeBootJar', Sync) {
    dependsOn bootJar
    into "$buildDir/boot_jar_exploded"
    from project.zipTree(bootJar.archiveFile)
}

def copyBuildInfo = tasks.register('copyBuildInfo', Copy) {
    mustRunAfter explodeBootJar
    from layout.buildDirectory.file("boot_jar_exploded/META-INF/build-info.properties")
    into layout.buildDirectory.dir("boot_jar_exploded/BOOT-INF/classes/META-INF/")
}

def jacocoUnitTestReport = tasks.register('jacocoUnitTestReport', JacocoReport) {
    mustRunAfter(test)
    executionData fileTree(project.buildDir.absolutePath).include("jacoco/test.exec")
    classDirectories.setFrom files(project.sourceSets.main.output)
    sourceDirectories.setFrom files(project.sourceSets.main.allSource.srcDirs)
    reports {
        html.required = false
        xml.required = true
    }
}

def jacocoIntegrationTestReport = tasks.register('jacocoIntegrationTestReport', JacocoReport) {
    mustRunAfter(integrationTests)
    executionData fileTree(project.buildDir.absolutePath).include("jacoco/integrationTests.exec")
    classDirectories.setFrom files(project.sourceSets.main.output)
    sourceDirectories.setFrom files(project.sourceSets.main.allSource.srcDirs)
    reports {
        html.required = false
        xml.required = true
    }
}

jacoco {
    toolVersion = "0.8.8"
}

test {
    useJUnitPlatform {
        excludeTags 'Integration'
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
    finalizedBy jacocoUnitTestReport
}

task integrationTests(type: Test) {
    useJUnitPlatform {
        includeTags 'Integration'
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
    filter {
        includeTestsMatching "net.flyingfishflash.ledger.*.integration.*"
    }
}

bootJar {
}

bootRun {
    jvmArgs = ["-Duser.timezone=UTC"]
}

compileJava {
    options.release.set(17)
}

springBoot {
    buildInfo {
        properties {
            artifact = 'ledger-backend'
            name = 'Ledger'
            version = scmVersion
            additional = [
                    'ciPlatform'  : ciPlatform,
                    'ciPipelineId': ciPipelineId,
                    'commit'      : scmCommit
            ]
        }
    }
}

spotless {
    format 'misc', {
        target '*.gradle', '*.md', '*.xml', '.gitignore'
        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }

    java {
        googleJavaFormat(googleJavaFormatVersion)
        trimTrailingWhitespace()
        importOrder('java', 'javax', 'com', 'org', 'net.flyingfishflash.ledger')
    }
}
