---
- name: Deploy Ledger via podman
  hosts: all
  remote_user: container-runner
  vars:
    dev_published_ports_postgresql:
      - "53123:5432"
    dev_published_ports_backend:
      - "53121:8181"
    dev_published_ports_frontend:
      - "53122:80"
    prd_published_ports_postgresql:
      - "53113:5432"
    prd_published_ports_backend:
      - "53111:8181"
    prd_published_ports_frontend:
      - "53112:80"

  tasks:
    - name: Include variables file
      ansible.builtin.include_vars:
        file: variables.yaml

    - name: Ensure region is defined and either 'dev' or 'prd'
      ansible.builtin.fail:
        msg: deployment region is not defined or is not set to 'dev' or 'prd'
      when:
        - region is not defined
        - region != "dev"
        - region != "prd"

    - name: Ensure tag is defined and not empty
      ansible.builtin.fail:
        msg: tag is not defined or empty
      when:
        - (tag is not defined) or (tag | length == 0)

    - name: Ensure registry_url is defined and not empty
      ansible.builtin.fail:
        msg: registry_url is not defined or empty
      when:
        - (registry_url is not defined) or (registry_url | length == 0)

    - name: Define region specific variables - dev
      ansible.builtin.set_fact:
        published_ports_postgresql: "{{ dev_published_ports_postgresql }}"
        published_ports_backend: "{{ dev_published_ports_backend }}"
        published_ports_frontend: "{{ dev_published_ports_frontend }}"
        region_configured: true
      when:
        - region == "dev"
        - (published_ports_postgresql is not defined) and (published_ports_backend is not defined) and (published_ports_frontend is not defined)
        - (dev_published_ports_postgresql is defined) and (dev_published_ports_postgresql | length > 0)
        - (dev_published_ports_backend is defined) and (dev_published_ports_backend | length > 0)
        - (dev_published_ports_frontend is defined) and (dev_published_ports_frontend | length > 0)

    - name: Define region specific variables - prd
      ansible.builtin.set_fact:
        published_ports_postgresql: "{{ prd_published_ports_postgresql }}"
        published_ports_backend: "{{ prd_published_ports_backend }}"
        published_ports_frontend: "{{ prd_published_ports_frontend }}"
        region_configured: true
      when:
        - region_configured is not defined
        - region == "prd"
        - (published_ports_postgresql is not defined) and (published_ports_backend is not defined) and (published_ports_frontend is not defined)
        - (prd_published_ports_postgresql is defined) and (prd_published_ports_postgresql | length > 0)
        - (prd_published_ports_backend is defined) and (prd_published_ports_backend | length > 0)
        - (prd_published_ports_frontend is defined) and (prd_published_ports_frontend | length > 0)

    - name: Ensure published_ports_postgresql is defined and not empty
      ansible.builtin.fail:
        msg: published_ports_postgresql is not defined or empty
      when:
        - (published_ports_postgresql is not defined) or (published_ports_postgresql | length == 0)

    - name: Ensure published_ports_backend is defined and not empty
      ansible.builtin.fail:
        msg: published_ports_backend is not defined or empty
      when:
        - (published_ports_backend is not defined) or (published_ports_backend | length == 0)

    - name: Ensure published_ports_frontend is defined and not empty
      ansible.builtin.fail:
        msg: published_ports_frontend is not defined or empty
      when:
        - (published_ports_frontend is not defined) or (published_ports_frontend | length == 0)

    - name: Stop and remove Ledger containers - {{ region }}
      containers.podman.podman_container:
        name: "{{ item }}"
        state: absent
      loop:
        - ledger-frontend-{{ region }}
        - ledger-backend-{{ region }}
        - ledger-postgresql-{{ region }}

    - name: Create network ledger-{{ region }}
      containers.podman.podman_network:
        name: ledger-{{ region }}

    - name: Start container ledger-postgresql-{{ region }}
      containers.podman.podman_container:
        env:
          POSTGRES_USER: ledger
          POSTGRES_PASSWORD: ledger
          POSTGRES_DB: ledger
        image: docker.io/postgres:14-alpine
        label:
          io.containers.autoupdate: registry
        log_driver: journald
        log_opt:
          tag: podman/ledger-postgresql-{{ region }}
        name: ledger-postgresql-{{ region }}
        network: ledger-{{ region }}
        published_ports: "{{ published_ports_postgresql }}"
        state: started

    - name: Start container ledger-backend-{{ region }}
      containers.podman.podman_container:
        env:
          JDK_JAVA_OPTIONS: -Djava.security.egd=file:/dev/./urandom -Duser.timezone="UTC"
          SPRING_PROFILES_ACTIVE: postgresql
          SPRING_JPA_SHOW_SQL: false
          SPRING_DATASOURCE_URL: jdbc:postgresql://ledger-postgresql-{{ region }}:5432/ledger
          SPRING_DATASOURCE_USERNAME: ledger
          SPRING_DATASOURCE_PASSWORD: ledger
          SPRING_DATASOURCE_PLATFORM: POSTGRESQL
        healthcheck: /bin/sh -c "wget http://127.0.0.1:8181/api/v1/health -T 30 -q -O -"
        healthcheck_interval: 60s
        healthcheck_retries: 3
        healthcheck_start_period: 15s
        healthcheck_timeout: 5s
        image: "{{ registry_url }}/ledger:{{ tag }}"
        log_driver: journald
        log_opt:
          tag: podman/ledger-backend-{{ region }}
        name: "ledger-backend-{{ region }}"
        network: ledger-{{ region }}
        published_ports: "{{ published_ports_backend }}"
        state: started

    - name: Wait for https://ledger-backend-{{ region }}.flyingfishflash.net/api/v1/health
      ansible.builtin.uri:
        url: "https://ledger-backend-{{ region }}.flyingfishflash.net/api/v1/health"
        method: GET
      register: _result
      until: _result.status == 200
      retries: 3
      delay: 5
      when:
        - not ansible_check_mode

    - name: Returned healthcheck status
      ansible.builtin.debug:
        var: _result.json
      when:
        - not ansible_check_mode

    - name: Start container ledger-frontend-{{ region }}
      containers.podman.podman_container:
        env:
          UPSTREAM_SERVER: ledger-backend-{{ region }}:8181
          API_SERVER_URL: https://ledger-{{ region }}.flyingfishflash.net/api/v1
        image: "{{ registry_url }}/ledger-frontend:{{ tag }}"
        log_driver: journald
        log_opt:
          tag: podman/ledger-frontend-{{ region }}
        name: "ledger-frontend-{{ region }}"
        network: ledger-{{ region }}
        published_ports: "{{ published_ports_frontend }}"
        state: started

    - name: Wait for https://ledger-{{ region }}.flyingfishflash.net/api/v1/health
      ansible.builtin.uri:
        url: https://ledger-{{ region }}.flyingfishflash.net/api/v1/health
        method: GET
      register: _result
      until: _result.status == 200
      retries: 3
      delay: 5
      when:
        - not ansible_check_mode

    - name: Returned healthcheck status
      ansible.builtin.debug:
        var: _result.json
      when:
        - not ansible_check_mode
